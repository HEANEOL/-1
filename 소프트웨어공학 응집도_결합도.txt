*응집도(Cohesion)** 

1Restaurant 모듈 (높은 응집도)
- 개별 레스토랑의 데이터를 관리하는 역할만 담당.
- self_reference()로 자기 식별을 하거나  reserve(), cancel_reservation() 등 자기 예약 처리만 수행하고 toggle_status()로 자기 운영 상태만 변경 하는등 독립적으로 레스토랑을 관리하는 기능
인 상태라고 볼 수 있을거 같다.
따라서 개별 레스토랑을 위한 기능이고 독립적이고 단일책임이기에 기능적 응집 상태에 가깝다고 할 수 있다.

CatchTable 모듈 (중간~높은 응집도)
- 사용자와 레스토랑을 연결하는 중앙 관리 시스템.
- add_restaurant(), list_restaurants()를 통해 레스토랑 리스트를 관리.
- process_request()에서 사용자 요청을 분류하고, 필요한 경우 Restaurant과 연결하는 역할을 한다.
사용자와 레스토랑의 기능을 처리하지만, 타 모듈과의 결합을 최소화하여 관리 역할을 수행하고 그 두요소가 밀접함으로
순차적 응집이라고 생각된다.

User 모듈 (중간~높은 응집도)
- 로그인, 로그아웃, 서비스 요청 등을 수행.
- CatchTable을 통해서만 요청을 처리하고 다른 모듈과 접촉을하지 않기 때문에 단일책임과 독립적 성격에 가까우며 기능적 응집에 가깝다.
정리하자면 사용자의 의사표현만을 담당하고 그외에 로그인 기능에 아주 약간 걸쳐 있지만 매우 적게 연관되어 있는 상태이기에
순차적 응집보단 기능적응집으로 보인다.


정리 응집도만 보았을 때 각 모듈의 응집도는 좋은 편이라고 볼 수 있으며 구성요소가 잘 짜인 상태라고 생각한다.


 모듈별 결합도(Coupling) 분석

Restaurant 모듈 (낮은 결합도)

CatchTable과 직접 연결되지 않으며, 단독 실행 가능.
Restaurant 인스턴스는 여러 개 생성될 수 있으며, 자기 상태만 관리.
위에서 말 했듯이 레스토랑모듈은 레스토랑 인스턴스를 만들어내는 모듈로 레스토랑의 상태만을 담당하기 때문에 
케치테이블에 데이터만을 주는 자료결합도를 가지고 있다고 볼 수 있다. 레스토랑의 운영상태에 관해선 기능적으로 필요 할 것이라고 생각되어
구현 했을 뿐, 굳이 케치테이블 모듈을 거쳐서 변경할게 아니라 레스토랑 모듈 자체에서 변경해도 문제 없음으로 자료결합도로 보는데 문제 없다고 
생각한다.


CatchTable 모듈 (중간 결합도)
- 사용자(User)와 레스토랑(Restaurant)을 중개하는 역할.
- Restaurant과 직접 연결되고, 내부 로직에는 아주 적게 관여하나 관여하지 않아도 기능에 치명적인 문제가 생기지 않기 때문에 관련성은
낮다고 볼 수 있다. 그러나 내부에 배열같은 자료구조를 가지고 있고 불 필요 할 수 도 있는 정보를 가지고 있는 점을 보아 스탬프 결합도를 가지고 있다고
보는 게 맞을 것이라고 생각한다. 





User 모듈 (낮은 결합도)
- CatchTable에 의사표현을 하는 역할.
-CatchTable에 의사표현을 전달하고 요청에 대한 응답을 받는 역할로 현재는 기능을 모든 의사표현을  순차적으로 하게 해놓아서 
불필요한 정보 교환이 발생 하기 때문에 필요보다 더 많은 정보를 받는 경향이 있기 때문에 일부 스탬프결합 성격을 띄고 있고
CatchTable에 절차를 일부 알아야 하지만 상세한 내용을 알고 의사를 전달 한다고 보긴 어렵기 때문에.
원 역할적으로 사용자의 원하는 의사만 전달한다고 가정한다면 자료결합도라고 생각된다.


 
정리 
전체적으로 결합도는 낮다고 볼 수 있다. 유저모듈이 어느정도 캐치테이블의 절차를 알아야하지만 상세에 대해선 알 필요가 없고 레스토랑모듈은 독립적으로 문제 없다. 
구조적 변화가 있다고 해도 유저모듈을 사용자의 요청을 전달 하는 역할에서 변질되지 않는다. 따라서 어느 정도 의존도는 있고 제어결합도, 스탬프결합도의 성격을 약간 가지고 있지만
자료결합도의 상태에 가장 가깝다고 생각된다.
 

